source_path: builder/amazon/common/run_config.go
name: RunConfig
required:
- name: instance_type
  type: string
  docs: |
    The EC2 instance type to use while building the
    AMI, such as t2.small.
- name: source_ami
  type: string
  docs: |
    The source AMI whose root volume will be copied and
    provisioned on the currently running instance. This must be an EBS-backed
    AMI with a root volume snapshot that you have access to. Note: this is not
    used when from_scratch is set to true.
not_required:
- name: associate_public_ip_address
  type: bool
  docs: |
    If using a non-default VPC,
    public IP addresses are not provided by default. If this is true, your
    new instance will get a Public IP. default: false
- name: availability_zone
  type: string
  docs: |
    Destination availability zone to launch
    instance in. Leave this empty to allow Amazon to auto-assign.
- name: block_duration_minutes
  type: int64
  docs: |
    Requires spot_price to be set. The
    required duration for the Spot Instances (also known as Spot blocks). This
    value must be a multiple of 60 (60, 120, 180, 240, 300, or 360). You can't
    specify an Availability Zone group or a launch group if you specify a
    duration.
- name: disable_stop_instance
  type: bool
  docs: |
    Packer normally stops the build
    instance after all provisioners have run. For Windows instances, it is
    sometimes desirable to run
    Sysprep
    which will stop the instance for you. If this is set to true, Packer
    will not stop the instance but will assume that you will send the stop
    signal yourself through your final provisioner. You can do this with a
    windows-shell
    provisioner.
- name: ebs_optimized
  type: bool
  docs: |
    Mark instance as EBS
    Optimized.
    Default false.
- name: enable_t2_unlimited
  type: bool
  docs: |
    Enabling T2 Unlimited allows the source
    instance to burst additional CPU beyond its available CPU
    Credits
    for as long as the demand exists. This is in contrast to the standard
    configuration that only allows an instance to consume up to its available
    CPU Credits. See the AWS documentation for T2
    Unlimited
    and the T2 Unlimited Pricing section of the Amazon EC2 On-Demand
    Pricing document for more
    information. By default this option is disabled and Packer will set up a
    T2
    Standard
    instance instead.
- name: iam_instance_profile
  type: string
  docs: |
    The name of an IAM instance
    profile
    to launch the EC2 instance with.
- name: shutdown_behavior
  type: string
  docs: |
    Automatically terminate instances on
    shutdown in case Packer exits ungracefully. Possible values are stop and
    terminate. Defaults to stop.
- name: security_group_filter
  type: SecurityGroupFilterOptions
  docs: |
    Filters used to populate the
    security_group_ids field. Example:
- name: run_tags
  type: '&{%!s(token.Pos=4812) string string}'
  docs: |
    Tags to apply to the instance
    that is launched to create the AMI. These tags are not applied to the
    resulting AMI unless they're duplicated in tags. This is a template
    engine, see Build template
    data for more information.
- name: security_group_id
  type: string
  docs: |
    The ID (not the name) of the security
    group to assign to the instance. By default this is not set and Packer will
    automatically create a new temporary security group to allow SSH access.
    Note that if this is specified, you must be sure the security group allows
    access to the ssh_port given below.
- name: security_group_ids
  type: '&{%!s(token.Pos=5494) <nil> string}'
  docs: |
    A list of security groups as
    described above. Note that if this is specified, you must omit the
    security_group_id.
- name: source_ami_filter
  type: AmiFilterOptions
  docs: |
    Filters used to populate the source_ami
    field. Example:
- name: spot_instance_types
  type: '&{%!s(token.Pos=6809) <nil> string}'
  docs: |
    a list of acceptable instance
    types to run your build on. We will request a spot instance using the max
    price of spot_price and the allocation strategy of "lowest price".
    Your instance will be launched on an instance type of the lowest available
    price that you have in your list.  This is used in place of instance_type.
    You may only set either spot_instance_types or instance_type, not both.
    This feature exists to help prevent situations where a Packer build fails
    because a particular availability zone does not have capacity for the
    specific instance_type requested in instance_type.
- name: spot_price
  type: string
  docs: |
    The maximum hourly price to pay for a spot instance
    to create the AMI. Spot instances are a type of instance that EC2 starts
    when the current spot price is less than the maximum price you specify.
    Spot price will be updated based on available spot instance capacity and
    current spot instance requests. It may save you some costs. You can set
    this to auto for Packer to automatically discover the best spot price or
    to "0" to use an on demand instance (default).
- name: spot_price_auto_product
  type: string
  docs: |
    Required if spot_price is set to
    auto. This tells Packer what sort of AMI you're launching to find the
    best spot price. This must be one of: Linux/UNIX, SUSE Linux,
    Windows, Linux/UNIX (Amazon VPC), SUSE Linux (Amazon VPC),
    Windows (Amazon VPC)
- name: spot_tags
  type: '&{%!s(token.Pos=8047) string string}'
  docs: |
    Requires spot_price to be
    set. This tells Packer to apply tags to the spot request that is issued.
- name: subnet_filter
  type: SubnetFilterOptions
  docs: |
    Filters used to populate the subnet_id field.
    Example:
- name: subnet_id
  type: string
  docs: |
    If using VPC, the ID of the subnet, such as
    subnet-12345def, where Packer will launch the EC2 instance. This field is
    required if you are using an non-default VPC.
- name: temporary_key_pair_name
  type: string
  docs: |
    The name of the temporary key pair to
    generate. By default, Packer generates a name that looks like
    packer_<UUID>, where <UUID> is a 36 character unique identifier.
- name: temporary_security_group_source_cidrs
  type: '&{%!s(token.Pos=9051) <nil> string}'
  docs: |
    A list of IPv4
    CIDR blocks to be authorized access to the instance, when packer is creating a temporary security group.
- name: user_data
  type: string
  docs: |
    User data to apply when launching the instance. Note
    that you need to be careful about escaping characters due to the templates
    being JSON. It is often more convenient to use user_data_file, instead.
    Packer will not automatically wait for a user script to finish before
    shutting down the instance this must be handled in a provisioner.
- name: user_data_file
  type: string
  docs: |
    Path to a file that will be used for the user
    data when launching the instance.
- name: vpc_filter
  type: VpcFilterOptions
  docs: |
    Filters used to populate the vpc_id field.
    vpc_id take precedence over this.
    Example:
- name: vpc_id
  type: string
  docs: |
    If launching into a VPC subnet, Packer needs the VPC ID
    in order to create a temporary security group within the VPC. Requires
    subnet_id to be set. If this field is left blank, Packer will try to get
    the VPC ID from the subnet_id.
- name: windows_password_timeout
  type: '&{time Duration}'
  docs: |
    The timeout for waiting for a Windows
    password for Windows instances. Defaults to 20 minutes. Example value:
    10m
- name: ""
  type: '&{communicator Config}'
  docs: |
    Communicator settings
